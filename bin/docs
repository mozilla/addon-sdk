#! /usr/bin/env python

import sys
import os
import getopt
import re
import markdown
import mdc

# Move to the base directory
os.chdir(os.environ['CUDDLEFISH_ROOT'])
DOCS_DIR = os.path.join("static-files", "docs")
STYLES_PATH = os.path.join("static-files", "docs", "css", "style.css")

md = markdown.Markdown(
  extensions=['fenced_code', 'api'], 
  safe_mode=False,
  output_format='html4'
)

def processAllDocs():
  for root, dirs, files in os.walk( DOCS_DIR ):
    for file in files:
      if file.endswith(".md"):
        processDoc( root, file )

def processDoc(root, file):
  path = os.path.join(root, file)
  mdText = open(path).read()
  html = md.convert(mdText)
  
  style = open(STYLES_PATH).read()
  
  newFile = file[:-3] + ".html"
  newPath = os.path.join(root, newFile)
  f = open(newPath, "w")
  if INCLUDE_STYLE:
    f.write("<style>"+style + "</style>\n\n")
  f.write(html)
  f.close()
  
  print "Compiled", path, "  -->  ", newFile
  

def commitAllDocs():
  for root, dirs, files in os.walk( DOCS_DIR ):
    for file in files:
      if file.endswith(".html"):
        commitDoc( root, file )

def convertDocToUploadFormat(root, file):
  
  newRoot = os.path.split(root)[1]
  path = os.path.join(root, file)
  
  # Strip static-dir/docs/ from the path
  wikiPath = path.split( os.path.sep )[2:]
  wikiPath = os.path.join( *wikiPath )
  wikiPath = os.path.splitext( wikiPath )[0]
  id = "en/Jetpack/" + wikiPath
  id = id.replace(" ", "_")

  html = open(path).read()
  match = re.match("<h1>(.*)</h1>", html)
  title = match.groups()[0]
  html = re.sub("<h1>.*?</h1>", "", html)
  #print html[:300]
  
  return dict(
    title = title,
    html = html,
    id = id
  )

def commitDoc(root, file):
  doc = convertDocToUploadFormat( root, file ) 
  print "Uploading ", doc["id"]
  print mdc.commit(doc)
  

def removeHtmlFiles():
  for root, dirs, files in os.walk( DOCS_DIR ):
    for file in files:
      if file.endswith(".html"):
        path = os.path.join( root, file )
        os.remove(path)

usage = """docs [options]

This tool takes documentation written in Markdown format (with
additional API extension, as well as the Fenced-code
extension) and converts it into HTML. You can also publish
those html-ified versions of the documentation to MDC.

See src/markdown/extensions for more detail on the extensions
in api.py and fenced_code.py

Options

 -h, --help
 Displays this help message.
 
 -b, --build
 Builds the HTML versions of the documentation. Do not edit
 these pages, because they will get overwritten. This does
 not publish the pages to MDC. It also appends the CSS 
 styles that MDC uses. This is useful to see the documentation
 will look like before you publish. When you publish, the styles
 will not be included.
 
 -p, --publish
 Publishes the documentation to MDC. This builds the
 documentation, then pushes it MDC, then cleans up
 after itself. The url on MDC updated depends on the
 folder structure. That is, "docs/System/Clipboard.md"
 will get published to "en/Jetpack/System/Clipboard" on
 https://developer.mozilla.org/.
  
 -c, --clean
 Removes all of the html-ified files.
"""

def main(argv):
  if len(argv) == 0:
    print usage
    sys.exit()
  
  try:
    opts, args = getopt.getopt(argv, "hbpc", ["help", "build", "publish", "clean"])
  except getopt.GetoptError:
    print usage
    sys.exit(2)
  
  flags = [x[0] for x in opts]
  global INCLUDE_STYLE  
  if "-b" in flags or "--build" in flags:
    INCLUDE_STYLE = True
  else:
    INCLUDE_STYLE = False
    
  for opt, arg in opts:
    if opt in ("-h", "--help"):
      print usage
      sys.exit()
    elif opt in ("-b", "--build"):
      processAllDocs()
    elif opt in ("-p", "--publish"):
      processAllDocs()
      commitAllDocs()
      removeHtmlFiles()
    elif opt in ("-c", "--clean"):
      removeHtmlFiles()


if __name__ == "__main__":
  main(sys.argv[1:])